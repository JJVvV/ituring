// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:ituring/http/repository/book_detail_data_entity.dart';
import 'package:ituring/http/repository/book_home_data_entity.dart';
import 'package:ituring/http/repository/books_data_entity.dart';
import 'package:ituring/http/repository/cart_data_entity.dart';
import 'package:ituring/http/repository/profile_data_entity.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);

class JsonConvert {
  static final Map<String, JsonConvertFunction> _convertFuncMap = {
    (BookDetailDataEntity).toString(): BookDetailDataEntity.fromJson,
    (BookDetailDataCategoriesBookDetailDataCategories).toString():
        BookDetailDataCategoriesBookDetailDataCategories.fromJson,
    (BookDetailDataDeputyEditor).toString():
        BookDetailDataDeputyEditor.fromJson,
    (BookDetailDataContributor).toString(): BookDetailDataContributor.fromJson,
    (BookDetailDataContributorAuthor).toString():
        BookDetailDataContributorAuthor.fromJson,
    (BookDetailDataBriefIntro).toString(): BookDetailDataBriefIntro.fromJson,
    (BookDetailDataExternalSalesInfo).toString():
        BookDetailDataExternalSalesInfo.fromJson,
    (BookDetailDataPaperEditionInfo).toString():
        BookDetailDataPaperEditionInfo.fromJson,
    (BookDetailDataSameCollectionBooks).toString():
        BookDetailDataSameCollectionBooks.fromJson,
    (BookDetailDataSameCollectionBooksAuthors).toString():
        BookDetailDataSameCollectionBooksAuthors.fromJson,
    (BookDetailDataSameCollectionBooksBookEditionPrices).toString():
        BookDetailDataSameCollectionBooksBookEditionPrices.fromJson,
    (BookDetailDataRelatedBooks).toString():
        BookDetailDataRelatedBooks.fromJson,
    (BookDetailDataRelatedBooksAuthors).toString():
        BookDetailDataRelatedBooksAuthors.fromJson,
    (BookDetailDataRelatedBooksTranslators).toString():
        BookDetailDataRelatedBooksTranslators.fromJson,
    (BookDetailDataRelatedBooksBookEditionPrices).toString():
        BookDetailDataRelatedBooksBookEditionPrices.fromJson,
    (BookDetailDataTags).toString(): BookDetailDataTags.fromJson,
    (BookDetailDataEbook).toString(): BookDetailDataEbook.fromJson,
    (BookDetailDataEbookChapters).toString():
        BookDetailDataEbookChapters.fromJson,
    (BookDetailDataResources).toString(): BookDetailDataResources.fromJson,
    (BookDetailDataSalesInfos).toString(): BookDetailDataSalesInfos.fromJson,
    (BookDetailDataBookEditionPrices).toString():
        BookDetailDataBookEditionPrices.fromJson,
    (BookHomeDataEntity).toString(): BookHomeDataEntity.fromJson,
    (BookHomeDataBlockContents).toString(): BookHomeDataBlockContents.fromJson,
    (BookHomeDataBlockContentsTag).toString():
        BookHomeDataBlockContentsTag.fromJson,
    (BookHomeDataBlockContentsTagBookItems).toString():
        BookHomeDataBlockContentsTagBookItems.fromJson,
    (BookHomeDataBlockContentsTagBookItemsBookEditionPrices).toString():
        BookHomeDataBlockContentsTagBookItemsBookEditionPrices.fromJson,
    (BookHomeDataBlockContentsEditableArea).toString():
        BookHomeDataBlockContentsEditableArea.fromJson,
    (BookHomeDataOnPublishBooks).toString():
        BookHomeDataOnPublishBooks.fromJson,
    (BookHomeDataOnPublishBooksBookEditionPrices).toString():
        BookHomeDataOnPublishBooksBookEditionPrices.fromJson,
    (BooksDataEntity).toString(): BooksDataEntity.fromJson,
    (BooksDataBookItems).toString(): BooksDataBookItems.fromJson,
    (BooksDataBookItemsBookEditionPrices).toString():
        BooksDataBookItemsBookEditionPrices.fromJson,
    (BooksDataPagination).toString(): BooksDataPagination.fromJson,
    (CartDataEntity).toString(): CartDataEntity.fromJson,
    (CartDataInvalidCartItems).toString(): CartDataInvalidCartItems.fromJson,
    (ProfileDataEntity).toString(): ProfileDataEntity.fromJson,
    (ProfileDataSpaceInfo).toString(): ProfileDataSpaceInfo.fromJson,
  };

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
    final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }
      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type == "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type == "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else if (type == "Map" || type.startsWith("Map<")) {
        return value as T;
      } else {
        if (_convertFuncMap.containsKey(type)) {
          return _convertFuncMap[type]!(value) as T;
        } else {
          throw UnimplementedError('$type unimplemented');
        }
      }
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<BookDetailDataEntity>[] is M) {
      return data
          .map<BookDetailDataEntity>(
              (Map<String, dynamic> e) => BookDetailDataEntity.fromJson(e))
          .toList() as M;
    }
    if (<BookDetailDataCategoriesBookDetailDataCategories>[] is M) {
      return data
          .map<BookDetailDataCategoriesBookDetailDataCategories>(
              (Map<String, dynamic> e) =>
                  BookDetailDataCategoriesBookDetailDataCategories.fromJson(e))
          .toList() as M;
    }
    if (<BookDetailDataDeputyEditor>[] is M) {
      return data
          .map<BookDetailDataDeputyEditor>((Map<String, dynamic> e) =>
              BookDetailDataDeputyEditor.fromJson(e))
          .toList() as M;
    }
    if (<BookDetailDataContributor>[] is M) {
      return data
          .map<BookDetailDataContributor>(
              (Map<String, dynamic> e) => BookDetailDataContributor.fromJson(e))
          .toList() as M;
    }
    if (<BookDetailDataContributorAuthor>[] is M) {
      return data
          .map<BookDetailDataContributorAuthor>((Map<String, dynamic> e) =>
              BookDetailDataContributorAuthor.fromJson(e))
          .toList() as M;
    }
    if (<BookDetailDataBriefIntro>[] is M) {
      return data
          .map<BookDetailDataBriefIntro>(
              (Map<String, dynamic> e) => BookDetailDataBriefIntro.fromJson(e))
          .toList() as M;
    }
    if (<BookDetailDataExternalSalesInfo>[] is M) {
      return data
          .map<BookDetailDataExternalSalesInfo>((Map<String, dynamic> e) =>
              BookDetailDataExternalSalesInfo.fromJson(e))
          .toList() as M;
    }
    if (<BookDetailDataPaperEditionInfo>[] is M) {
      return data
          .map<BookDetailDataPaperEditionInfo>((Map<String, dynamic> e) =>
              BookDetailDataPaperEditionInfo.fromJson(e))
          .toList() as M;
    }
    if (<BookDetailDataSameCollectionBooks>[] is M) {
      return data
          .map<BookDetailDataSameCollectionBooks>((Map<String, dynamic> e) =>
              BookDetailDataSameCollectionBooks.fromJson(e))
          .toList() as M;
    }
    if (<BookDetailDataSameCollectionBooksAuthors>[] is M) {
      return data
          .map<BookDetailDataSameCollectionBooksAuthors>(
              (Map<String, dynamic> e) =>
                  BookDetailDataSameCollectionBooksAuthors.fromJson(e))
          .toList() as M;
    }
    if (<BookDetailDataSameCollectionBooksBookEditionPrices>[] is M) {
      return data
          .map<BookDetailDataSameCollectionBooksBookEditionPrices>(
              (Map<String, dynamic> e) =>
                  BookDetailDataSameCollectionBooksBookEditionPrices.fromJson(
                      e))
          .toList() as M;
    }
    if (<BookDetailDataRelatedBooks>[] is M) {
      return data
          .map<BookDetailDataRelatedBooks>((Map<String, dynamic> e) =>
              BookDetailDataRelatedBooks.fromJson(e))
          .toList() as M;
    }
    if (<BookDetailDataRelatedBooksAuthors>[] is M) {
      return data
          .map<BookDetailDataRelatedBooksAuthors>((Map<String, dynamic> e) =>
              BookDetailDataRelatedBooksAuthors.fromJson(e))
          .toList() as M;
    }
    if (<BookDetailDataRelatedBooksTranslators>[] is M) {
      return data
          .map<BookDetailDataRelatedBooksTranslators>(
              (Map<String, dynamic> e) =>
                  BookDetailDataRelatedBooksTranslators.fromJson(e))
          .toList() as M;
    }
    if (<BookDetailDataRelatedBooksBookEditionPrices>[] is M) {
      return data
          .map<BookDetailDataRelatedBooksBookEditionPrices>(
              (Map<String, dynamic> e) =>
                  BookDetailDataRelatedBooksBookEditionPrices.fromJson(e))
          .toList() as M;
    }
    if (<BookDetailDataTags>[] is M) {
      return data
          .map<BookDetailDataTags>(
              (Map<String, dynamic> e) => BookDetailDataTags.fromJson(e))
          .toList() as M;
    }
    if (<BookDetailDataEbook>[] is M) {
      return data
          .map<BookDetailDataEbook>(
              (Map<String, dynamic> e) => BookDetailDataEbook.fromJson(e))
          .toList() as M;
    }
    if (<BookDetailDataEbookChapters>[] is M) {
      return data
          .map<BookDetailDataEbookChapters>((Map<String, dynamic> e) =>
              BookDetailDataEbookChapters.fromJson(e))
          .toList() as M;
    }
    if (<BookDetailDataResources>[] is M) {
      return data
          .map<BookDetailDataResources>(
              (Map<String, dynamic> e) => BookDetailDataResources.fromJson(e))
          .toList() as M;
    }
    if (<BookDetailDataSalesInfos>[] is M) {
      return data
          .map<BookDetailDataSalesInfos>(
              (Map<String, dynamic> e) => BookDetailDataSalesInfos.fromJson(e))
          .toList() as M;
    }
    if (<BookDetailDataBookEditionPrices>[] is M) {
      return data
          .map<BookDetailDataBookEditionPrices>((Map<String, dynamic> e) =>
              BookDetailDataBookEditionPrices.fromJson(e))
          .toList() as M;
    }
    if (<BookHomeDataEntity>[] is M) {
      return data
          .map<BookHomeDataEntity>(
              (Map<String, dynamic> e) => BookHomeDataEntity.fromJson(e))
          .toList() as M;
    }
    if (<BookHomeDataBlockContents>[] is M) {
      return data
          .map<BookHomeDataBlockContents>(
              (Map<String, dynamic> e) => BookHomeDataBlockContents.fromJson(e))
          .toList() as M;
    }
    if (<BookHomeDataBlockContentsTag>[] is M) {
      return data
          .map<BookHomeDataBlockContentsTag>((Map<String, dynamic> e) =>
              BookHomeDataBlockContentsTag.fromJson(e))
          .toList() as M;
    }
    if (<BookHomeDataBlockContentsTagBookItems>[] is M) {
      return data
          .map<BookHomeDataBlockContentsTagBookItems>(
              (Map<String, dynamic> e) =>
                  BookHomeDataBlockContentsTagBookItems.fromJson(e))
          .toList() as M;
    }
    if (<BookHomeDataBlockContentsTagBookItemsBookEditionPrices>[] is M) {
      return data
          .map<BookHomeDataBlockContentsTagBookItemsBookEditionPrices>(
              (Map<String, dynamic> e) =>
                  BookHomeDataBlockContentsTagBookItemsBookEditionPrices
                      .fromJson(e))
          .toList() as M;
    }
    if (<BookHomeDataBlockContentsEditableArea>[] is M) {
      return data
          .map<BookHomeDataBlockContentsEditableArea>(
              (Map<String, dynamic> e) =>
                  BookHomeDataBlockContentsEditableArea.fromJson(e))
          .toList() as M;
    }
    if (<BookHomeDataOnPublishBooks>[] is M) {
      return data
          .map<BookHomeDataOnPublishBooks>((Map<String, dynamic> e) =>
              BookHomeDataOnPublishBooks.fromJson(e))
          .toList() as M;
    }
    if (<BookHomeDataOnPublishBooksBookEditionPrices>[] is M) {
      return data
          .map<BookHomeDataOnPublishBooksBookEditionPrices>(
              (Map<String, dynamic> e) =>
                  BookHomeDataOnPublishBooksBookEditionPrices.fromJson(e))
          .toList() as M;
    }
    if (<BooksDataEntity>[] is M) {
      return data
          .map<BooksDataEntity>(
              (Map<String, dynamic> e) => BooksDataEntity.fromJson(e))
          .toList() as M;
    }
    if (<BooksDataBookItems>[] is M) {
      return data
          .map<BooksDataBookItems>(
              (Map<String, dynamic> e) => BooksDataBookItems.fromJson(e))
          .toList() as M;
    }
    if (<BooksDataBookItemsBookEditionPrices>[] is M) {
      return data
          .map<BooksDataBookItemsBookEditionPrices>((Map<String, dynamic> e) =>
              BooksDataBookItemsBookEditionPrices.fromJson(e))
          .toList() as M;
    }
    if (<BooksDataPagination>[] is M) {
      return data
          .map<BooksDataPagination>(
              (Map<String, dynamic> e) => BooksDataPagination.fromJson(e))
          .toList() as M;
    }
    if (<CartDataEntity>[] is M) {
      return data
          .map<CartDataEntity>(
              (Map<String, dynamic> e) => CartDataEntity.fromJson(e))
          .toList() as M;
    }
    if (<CartDataInvalidCartItems>[] is M) {
      return data
          .map<CartDataInvalidCartItems>(
              (Map<String, dynamic> e) => CartDataInvalidCartItems.fromJson(e))
          .toList() as M;
    }
    if (<ProfileDataEntity>[] is M) {
      return data
          .map<ProfileDataEntity>(
              (Map<String, dynamic> e) => ProfileDataEntity.fromJson(e))
          .toList() as M;
    }
    if (<ProfileDataSpaceInfo>[] is M) {
      return data
          .map<ProfileDataSpaceInfo>(
              (Map<String, dynamic> e) => ProfileDataSpaceInfo.fromJson(e))
          .toList() as M;
    }

    debugPrint("${M.toString()} not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is List) {
      return _getListChildType<M>(
          json.map((e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.asT<M>(json);
    }
  }
}
